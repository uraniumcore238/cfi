{"uid":"8ee0b9da5fc6c5a7","name":"Customer doesn't fill the last name","fullName":"app.tests.test_registration_page#test_empty_last_name","historyId":"0bc92321cad80f6e3dcb9ca93a0ab926","time":{"start":1682963295288,"stop":1682963295293,"duration":5},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\n  (Session info: chrome=112.0.5615.165)\nStacktrace:\n#0 0x563926383fe3 <unknown>\n#1 0x5639260c2bc1 <unknown>\n#2 0x5639260ad446 <unknown>\n#3 0x5639260ab7f3 <unknown>\n#4 0x5639260abc3d <unknown>\n#5 0x5639260c4b16 <unknown>\n#6 0x5639261398c5 <unknown>\n#7 0x5639261208c2 <unknown>\n#8 0x563926139232 <unknown>\n#9 0x563926120693 <unknown>\n#10 0x5639260f303a <unknown>\n#11 0x5639260f417e <unknown>\n#12 0x563926345dbd <unknown>\n#13 0x563926349c6c <unknown>\n#14 0x5639263534b0 <unknown>\n#15 0x56392634ad63 <unknown>\n#16 0x56392631dc35 <unknown>\n#17 0x56392636e138 <unknown>\n#18 0x56392636e2c7 <unknown>\n#19 0x56392637c093 <unknown>\n#20 0x7f56effa1b43 <unknown>","statusTrace":"wd = <selenium.webdriver.remote.webdriver.WebDriver (session=\"93f2117e09e3f9203362bfa2ff6c703b\")>\n\n    @allure.tag('id 1.4')\n    @allure.label('owner', 'SergeiT')\n    @allure.severity('normal')\n    @allure.feature('Registration page')\n    @allure.title(\"Customer doesn't fill the last name\")\n    def test_empty_last_name(wd):\n        registration_page = RegistrationPage(wd)\n        url = f\"{os.getenv('URL_PROD')}/cy/en/registration\"\n>       registration_page.open(url)\n\napp/tests/test_registration_page.py:67: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napp/pages/base_page.py:21: in open\n    self.driver.get(url)\n/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:449: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f0817b86050>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument\\\\n  (Session info: chrome=1...\\\\n#18 0x56392636e2c7 \\\\u003Cunknown>\\\\n#19 0x56392637c093 \\\\u003Cunknown>\\\\n#20 0x7f56effa1b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\nE         (Session info: chrome=112.0.5615.165)\nE       Stacktrace:\nE       #0 0x563926383fe3 <unknown>\nE       #1 0x5639260c2bc1 <unknown>\nE       #2 0x5639260ad446 <unknown>\nE       #3 0x5639260ab7f3 <unknown>\nE       #4 0x5639260abc3d <unknown>\nE       #5 0x5639260c4b16 <unknown>\nE       #6 0x5639261398c5 <unknown>\nE       #7 0x5639261208c2 <unknown>\nE       #8 0x563926139232 <unknown>\nE       #9 0x563926120693 <unknown>\nE       #10 0x5639260f303a <unknown>\nE       #11 0x5639260f417e <unknown>\nE       #12 0x563926345dbd <unknown>\nE       #13 0x563926349c6c <unknown>\nE       #14 0x5639263534b0 <unknown>\nE       #15 0x56392634ad63 <unknown>\nE       #16 0x56392631dc35 <unknown>\nE       #17 0x56392636e138 <unknown>\nE       #18 0x56392636e2c7 <unknown>\nE       #19 0x56392637c093 <unknown>\nE       #20 0x7f56effa1b43 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: InvalidArgumentException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1682963258663,"stop":1682963258728,"duration":65},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0,"attachmentsCount":0},{"name":"config","time":{"start":1682963258728,"stop":1682963258728,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0,"attachmentsCount":0},{"name":"load_env","time":{"start":1682963258728,"stop":1682963258728,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0,"attachmentsCount":0},{"name":"wd","time":{"start":1682963294789,"stop":1682963295287,"duration":498},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\n  (Session info: chrome=112.0.5615.165)\nStacktrace:\n#0 0x563926383fe3 <unknown>\n#1 0x5639260c2bc1 <unknown>\n#2 0x5639260ad446 <unknown>\n#3 0x5639260ab7f3 <unknown>\n#4 0x5639260abc3d <unknown>\n#5 0x5639260c4b16 <unknown>\n#6 0x5639261398c5 <unknown>\n#7 0x5639261208c2 <unknown>\n#8 0x563926139232 <unknown>\n#9 0x563926120693 <unknown>\n#10 0x5639260f303a <unknown>\n#11 0x5639260f417e <unknown>\n#12 0x563926345dbd <unknown>\n#13 0x563926349c6c <unknown>\n#14 0x5639263534b0 <unknown>\n#15 0x56392634ad63 <unknown>\n#16 0x56392631dc35 <unknown>\n#17 0x56392636e138 <unknown>\n#18 0x56392636e2c7 <unknown>\n#19 0x56392637c093 <unknown>\n#20 0x7f56effa1b43 <unknown>","statusTrace":"wd = <selenium.webdriver.remote.webdriver.WebDriver (session=\"93f2117e09e3f9203362bfa2ff6c703b\")>\n\n    @allure.tag('id 1.4')\n    @allure.label('owner', 'SergeiT')\n    @allure.severity('normal')\n    @allure.feature('Registration page')\n    @allure.title(\"Customer doesn't fill the last name\")\n    def test_empty_last_name(wd):\n        registration_page = RegistrationPage(wd)\n        url = f\"{os.getenv('URL_PROD')}/cy/en/registration\"\n>       registration_page.open(url)\n\napp/tests/test_registration_page.py:67: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napp/pages/base_page.py:21: in open\n    self.driver.get(url)\n/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:449: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f0817b86050>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument\\\\n  (Session info: chrome=1...\\\\n#18 0x56392636e2c7 \\\\u003Cunknown>\\\\n#19 0x56392637c093 \\\\u003Cunknown>\\\\n#20 0x7f56effa1b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\nE         (Session info: chrome=112.0.5615.165)\nE       Stacktrace:\nE       #0 0x563926383fe3 <unknown>\nE       #1 0x5639260c2bc1 <unknown>\nE       #2 0x5639260ad446 <unknown>\nE       #3 0x5639260ab7f3 <unknown>\nE       #4 0x5639260abc3d <unknown>\nE       #5 0x5639260c4b16 <unknown>\nE       #6 0x5639261398c5 <unknown>\nE       #7 0x5639261208c2 <unknown>\nE       #8 0x563926139232 <unknown>\nE       #9 0x563926120693 <unknown>\nE       #10 0x5639260f303a <unknown>\nE       #11 0x5639260f417e <unknown>\nE       #12 0x563926345dbd <unknown>\nE       #13 0x563926349c6c <unknown>\nE       #14 0x5639263534b0 <unknown>\nE       #15 0x56392634ad63 <unknown>\nE       #16 0x56392631dc35 <unknown>\nE       #17 0x56392636e138 <unknown>\nE       #18 0x56392636e2c7 <unknown>\nE       #19 0x56392637c093 <unknown>\nE       #20 0x7f56effa1b43 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: InvalidArgumentException","steps":[{"name":"Open url None/cy/en/registration","time":{"start":1682963295289,"stop":1682963295292,"duration":3},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\n  (Session info: chrome=112.0.5615.165)\nStacktrace:\n#0 0x563926383fe3 <unknown>\n#1 0x5639260c2bc1 <unknown>\n#2 0x5639260ad446 <unknown>\n#3 0x5639260ab7f3 <unknown>\n#4 0x5639260abc3d <unknown>\n#5 0x5639260c4b16 <unknown>\n#6 0x5639261398c5 <unknown>\n#7 0x5639261208c2 <unknown>\n#8 0x563926139232 <unknown>\n#9 0x563926120693 <unknown>\n#10 0x5639260f303a <unknown>\n#11 0x5639260f417e <unknown>\n#12 0x563926345dbd <unknown>\n#13 0x563926349c6c <unknown>\n#14 0x5639263534b0 <unknown>\n#15 0x56392634ad63 <unknown>\n#16 0x56392631dc35 <unknown>\n#17 0x56392636e138 <unknown>\n#18 0x56392636e2c7 <unknown>\n#19 0x56392637c093 <unknown>\n#20 0x7f56effa1b43 <unknown>\n\n","statusTrace":"  File \"/home/runner/work/cfi/cfi/app/pages/base_page.py\", line 21, in open\n    self.driver.get(url)\n  File \"/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 449, in get\n    self.execute(Command.GET, {\"url\": url})\n  File \"/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 440, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.11.3/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 245, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"hasContent":true,"stepsCount":0,"attachmentsCount":0}],"attachments":[{"uid":"14e24a2907fa3689","name":"screenshot","source":"14e24a2907fa3689.png","type":"image/png","size":6665}],"parameters":[],"shouldDisplayMessage":true,"hasContent":true,"stepsCount":1,"attachmentsCount":1},"afterStages":[{"name":"wd::0","time":{"start":1682963295462,"stop":1682963295518,"duration":56},"status":"passed","steps":[{"name":"Close the driver","time":{"start":1682963295462,"stop":1682963295518,"duration":56},"status":"passed","steps":[],"attachments":[{"uid":"a68efbe851cba697","name":"page_source","source":"a68efbe851cba697.html","type":"text/html","size":39},{"uid":"cf91f988da93ac9c","name":"browser_logs","source":"cf91f988da93ac9c.txt","type":"text/plain","size":0}],"parameters":[],"shouldDisplayMessage":false,"hasContent":true,"stepsCount":0,"attachmentsCount":2}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"hasContent":true,"stepsCount":1,"attachmentsCount":2}],"labels":[{"name":"severity","value":"normal"},{"name":"owner","value":"SergeiT"},{"name":"feature","value":"Registration page"},{"name":"tag","value":"id 1.4"},{"name":"parentSuite","value":"app.tests"},{"name":"suite","value":"test_registration_page"},{"name":"host","value":"fv-az674-363"},{"name":"thread","value":"2476-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"app.tests.test_registration_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","owner":"SergeiT","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":0,"unknown":0,"total":3},"items":[{"uid":"9cdf79cec6670c2a","reportUrl":"https://uraniumcore238.github.io/cfi/6//#testresult/9cdf79cec6670c2a","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x558d537effe3 <unknown>\n#1 0x558d5352ed36 <unknown>\n#2 0x558d53557b20 <unknown>\n#3 0x558d53553a9b <unknown>\n#4 0x558d53595af7 <unknown>\n#5 0x558d5359511f <unknown>\n#6 0x558d5358c693 <unknown>\n#7 0x558d5355f03a <unknown>\n#8 0x558d5356017e <unknown>\n#9 0x558d537b1dbd <unknown>\n#10 0x558d537b5c6c <unknown>\n#11 0x558d537bf4b0 <unknown>\n#12 0x558d537b6d63 <unknown>\n#13 0x558d53789c35 <unknown>\n#14 0x558d537da138 <unknown>\n#15 0x558d537da2c7 <unknown>\n#16 0x558d537e8093 <unknown>\n#17 0x7fd9783ceb43 <unknown>","time":{"start":1682960513795,"stop":1682960513795,"duration":0}},{"uid":"39928761992846a1","reportUrl":"https://uraniumcore238.github.io/cfi/5//#testresult/39928761992846a1","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x56484c48efe3 <unknown>\n#1 0x56484c1cdd36 <unknown>\n#2 0x56484c1f6b20 <unknown>\n#3 0x56484c1f2a9b <unknown>\n#4 0x56484c234af7 <unknown>\n#5 0x56484c23411f <unknown>\n#6 0x56484c22b693 <unknown>\n#7 0x56484c1fe03a <unknown>\n#8 0x56484c1ff17e <unknown>\n#9 0x56484c450dbd <unknown>\n#10 0x56484c454c6c <unknown>\n#11 0x56484c45e4b0 <unknown>\n#12 0x56484c455d63 <unknown>\n#13 0x56484c428c35 <unknown>\n#14 0x56484c479138 <unknown>\n#15 0x56484c4792c7 <unknown>\n#16 0x56484c487093 <unknown>\n#17 0x7fa2a702eb43 <unknown>","time":{"start":1682960285458,"stop":1682960285458,"duration":0}}]},"tags":["id 1.4"]},"source":"8ee0b9da5fc6c5a7.json","parameterValues":[]}